/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package cosmetic.store;

import Classes.DbConnection;
import Classes.Loadcategories;
import Classes.ProductData;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author BIMSARA
 */
public class OrderCheckoutJPanel extends javax.swing.JPanel {
    Connection connection;
    PreparedStatement ps;
    ProductData productDB;

    /**
     * Creates new form OrderCheckoutJPanel
     */
    public OrderCheckoutJPanel() {
        initComponents();
        connection = DbConnection.getInstance().getConnection();
        loadTable1();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        spinCount4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        txtID1 = new javax.swing.JTextField();
        txtCustName1 = new javax.swing.JTextField();
        txtProductId1 = new javax.swing.JTextField();
        txtProductName1 = new javax.swing.JTextField();
        txtPrice1 = new javax.swing.JTextField();
        txtii1 = new javax.swing.JTextField();
        txtFinal1 = new javax.swing.JTextField();
        jLabel43 = new javax.swing.JLabel();
        txtOrderId = new javax.swing.JTextField();
        btnCheckout = new javax.swing.JButton();
        txtDate = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrder = new javax.swing.JTable();
        lbluser2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtSearchId = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel42 = new javax.swing.JLabel();

        jPanel7.setBackground(new java.awt.Color(153, 153, 153));

        jLabel35.setBackground(new java.awt.Color(102, 102, 102));
        jLabel35.setForeground(new java.awt.Color(255, 255, 255));
        jLabel35.setText(" Customer ID :");
        jLabel35.setOpaque(true);

        jLabel36.setBackground(new java.awt.Color(102, 102, 102));
        jLabel36.setForeground(new java.awt.Color(255, 255, 255));
        jLabel36.setText(" Customer Name :");
        jLabel36.setOpaque(true);

        jLabel37.setBackground(new java.awt.Color(102, 102, 102));
        jLabel37.setForeground(new java.awt.Color(255, 255, 255));
        jLabel37.setText(" Product ID :");
        jLabel37.setOpaque(true);

        jLabel38.setBackground(new java.awt.Color(102, 102, 102));
        jLabel38.setForeground(new java.awt.Color(255, 255, 255));
        jLabel38.setText(" Product Name :");
        jLabel38.setOpaque(true);

        jLabel39.setBackground(new java.awt.Color(102, 102, 102));
        jLabel39.setForeground(new java.awt.Color(255, 255, 255));
        jLabel39.setText(" Unit Price :");
        jLabel39.setOpaque(true);

        jLabel40.setBackground(new java.awt.Color(102, 102, 102));
        jLabel40.setForeground(new java.awt.Color(255, 255, 255));
        jLabel40.setText(" Quantity :");
        jLabel40.setOpaque(true);

        jLabel41.setBackground(new java.awt.Color(102, 102, 102));
        jLabel41.setForeground(new java.awt.Color(255, 255, 255));
        jLabel41.setText(" Final Price :");
        jLabel41.setOpaque(true);

        txtID1.setEditable(false);

        txtCustName1.setEditable(false);
        txtCustName1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCustName1ActionPerformed(evt);
            }
        });

        txtProductId1.setEditable(false);

        txtProductName1.setEditable(false);

        txtPrice1.setEditable(false);

        txtii1.setEditable(false);

        txtFinal1.setEditable(false);
        txtFinal1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtFinal1MouseClicked(evt);
            }
        });

        jLabel43.setBackground(new java.awt.Color(102, 102, 102));
        jLabel43.setForeground(new java.awt.Color(255, 255, 255));
        jLabel43.setText("Order ID :");
        jLabel43.setOpaque(true);

        txtOrderId.setEditable(false);

        btnCheckout.setBackground(new java.awt.Color(102, 102, 102));
        btnCheckout.setForeground(new java.awt.Color(255, 255, 255));
        btnCheckout.setText("Checkout");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        jLabel44.setBackground(new java.awt.Color(102, 102, 102));
        jLabel44.setForeground(new java.awt.Color(255, 255, 255));
        jLabel44.setText(" Order Date :");
        jLabel44.setOpaque(true);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnCheckout)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel38, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                                .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel44, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDate, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCustName1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(txtProductId1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtProductName1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtPrice1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtii1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFinal1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtOrderId, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtID1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)))))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43)
                    .addComponent(txtOrderId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35)
                    .addComponent(txtID1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(txtCustName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(txtProductId1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(txtProductName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel39)
                    .addComponent(txtPrice1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(txtii1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFinal1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel44)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addComponent(btnCheckout)
                .addGap(16, 16, 16))
        );

        jPanel8.setBackground(new java.awt.Color(153, 153, 153));
        jPanel8.setForeground(new java.awt.Color(153, 153, 153));

        tblOrder.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Product ID", "Product name", "Category", "Unit price", "Stock"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrderMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblOrder);

        jLabel1.setBackground(new java.awt.Color(102, 102, 102));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText(" Search");
        jLabel1.setOpaque(true);

        btnSearch.setBackground(new java.awt.Color(102, 102, 102));
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(102, 102, 102));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Refresh");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbluser2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearchId, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearch))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(37, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtSearchId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(12, 12, 12)
                .addComponent(lbluser2, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout spinCount4Layout = new javax.swing.GroupLayout(spinCount4);
        spinCount4.setLayout(spinCount4Layout);
        spinCount4Layout.setHorizontalGroup(
            spinCount4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spinCount4Layout.createSequentialGroup()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        spinCount4Layout.setVerticalGroup(
            spinCount4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spinCount4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(spinCount4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jLabel42.setBackground(new java.awt.Color(204, 204, 204));
        jLabel42.setFont(new java.awt.Font("Colonna MT", 1, 24)); // NOI18N
        jLabel42.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel42.setText("Checkout Order");
        jLabel42.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel42.setOpaque(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spinCount4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel42, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spinCount4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtCustName1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCustName1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCustName1ActionPerformed

    private void txtFinal1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFinal1MouseClicked
        calculateFinalPrice1();
    }//GEN-LAST:event_txtFinal1MouseClicked

    private void tblOrderMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrderMouseClicked
        DefaultTableModel model = (DefaultTableModel) tblOrder.getModel();

        int row = tblOrder.getSelectedRow();
        txtOrderId.setText(model.getValueAt(row, 0).toString());
        txtID1.setText(model.getValueAt(row, 1).toString());
        txtCustName1.setText(model.getValueAt(row, 2).toString());
        txtProductId1.setText(model.getValueAt(row, 3).toString());
        txtProductName1.setText(model.getValueAt(row, 4).toString());
        txtPrice1.setText(model.getValueAt(row, 5).toString());
        txtii1.setText(model.getValueAt(row, 6).toString());
        txtFinal1.setText(model.getValueAt(row, 7).toString());
        txtDate.setText(model.getValueAt(row, 7).toString());
    }//GEN-LAST:event_tblOrderMouseClicked

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        try {
        String searchText = txtSearchId.getText().trim();

        // Validate input
        if (searchText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a search term!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Build the SQL query dynamically based on the input
        String sql;
        boolean isNumeric = searchText.matches("\\d+(\\.\\d+)?");

        if (isNumeric) {
            // Search by numeric field: Price
            sql = "SELECT * FROM tblorder WHERE Price = ?";
            ps = connection.prepareStatement(sql);
            ps.setDouble(1, Double.parseDouble(searchText));
        } else {
            // Search by non-numeric fields: OrderId, CustID or CustName
            sql = "SELECT * FROM tblorder WHERE OrderId = ? OR CustID = ? OR CustName LIKE ?";
            ps = connection.prepareStatement(sql);
            ps.setString(1, searchText);
            ps.setString(2, searchText);
            ps.setString(3, "%" + searchText + "%");
        }

        ResultSet rs = ps.executeQuery();

        DefaultTableModel model = new DefaultTableModel();
        tblOrder.setModel(model);

        model.addColumn("Order ID");
        model.addColumn("Customer ID");
        model.addColumn("Customer Name");
        model.addColumn("Product ID");
        model.addColumn("Product Name");
        model.addColumn("Unit Price");
        model.addColumn("Qty");
        model.addColumn("Price");

        boolean found = false;
        while (rs.next()) {
            found = true;
            String orderID = rs.getString("OrderId");
            String custID = rs.getString("CustID");
            String custName = rs.getString("CustName");
            String proID = rs.getString("ProID");
            String proName = rs.getString("Product_Name");
            double uPrice = rs.getDouble("UPrice");
            int qty = rs.getInt("qty");
            double price = rs.getDouble("Price");

            model.addRow(new Object[]{orderID, custID, custName, proID, proName, uPrice, qty, price});
        }

        if (!found) {
            JOptionPane.showMessageDialog(this, "No matching orders found", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred while searching for orders", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
       try {
            
            
        // Get the selected row index
        int selectedRow = tblOrder.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select an order to checkout.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // Get order details from the selected row
        String orderId = tblOrder.getValueAt(selectedRow, 0).toString();
        String custId = tblOrder.getValueAt(selectedRow, 1).toString();
        String custName = tblOrder.getValueAt(selectedRow, 2).toString();
        String proId = tblOrder.getValueAt(selectedRow, 3).toString();
        String proName = tblOrder.getValueAt(selectedRow, 4).toString();
        double unitPrice = Double.parseDouble(tblOrder.getValueAt(selectedRow, 5).toString());
        int qty = Integer.parseInt(tblOrder.getValueAt(selectedRow, 6).toString());
        double price = Double.parseDouble(tblOrder.getValueAt(selectedRow, 7).toString());
        String date = tblOrder.getValueAt(selectedRow, 8).toString();
        
        // Remove order from the order table

            String sql = "DELETE FROM tblorder WHERE OrderId =?";
            ps = connection.prepareStatement(sql);

            ps.setString(1, orderId);
             if (ps.executeUpdate() > 0) {

        // Save order details to the checkout table
        String sqlCheck = "INSERT INTO tblcheckout (OrderId, CustID, CustName, ProID, Product_Name, UPrice, Qty, Price, OrderDate, checkOutdate) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP())";
        PreparedStatement checkoutStatement = connection.prepareStatement(sqlCheck);
        checkoutStatement.setString(1, orderId);
        checkoutStatement.setString(2, custId);
        checkoutStatement.setString(3, custName);
        checkoutStatement.setString(4, proId);
        checkoutStatement.setString(5, proName);
        checkoutStatement.setDouble(6, unitPrice);
        checkoutStatement.setInt(7, qty);
        checkoutStatement.setDouble(8, price);
        checkoutStatement.setString(9, date);
        checkoutStatement.executeUpdate();

        // Commit the changes
        

        JOptionPane.showMessageDialog(this, "Order checked out successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        loadTable1();
        clear1();
             }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error occurred while checking out order.", "Error", JOptionPane.ERROR_MESSAGE);
        try {
            // Rollback the transaction in case of an error
            connection.rollback();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    } 
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        loadTable1();
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbluser2;
    private javax.swing.JPanel spinCount4;
    private javax.swing.JTable tblOrder;
    private javax.swing.JTextField txtCustName1;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtFinal1;
    private javax.swing.JTextField txtID1;
    private javax.swing.JTextField txtOrderId;
    private javax.swing.JTextField txtPrice1;
    private javax.swing.JTextField txtProductId1;
    private javax.swing.JTextField txtProductName1;
    private javax.swing.JTextField txtSearchId;
    private javax.swing.JTextField txtii1;
    // End of variables declaration//GEN-END:variables
private void calculateFinalPrice1() {
        try {
            Double Uprice = Double.parseDouble(txtPrice1.getText());
            int Qty = Integer.parseInt(txtii1.getText());
            Double pfinal = Uprice * Qty;
            txtFinal1.setText(String.valueOf(pfinal));
        } catch (NumberFormatException e) {
            txtFinal1.setText("");
        }
    }

    private void reduceStock1(String productId, int qty) {
        try {
            String sql = "UPDATE tblproducts SET Stocks = Stocks + ? WHERE Product_ID = ?";
            ps = connection.prepareStatement(sql);
            ps.setInt(1, qty);
            ps.setString(2, productId);
            ps.executeUpdate();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void clear1() {
        txtOrderId.setText("");
        txtID1.setText("");
        txtCustName1.setText("");
        txtProductId1.setText("");
        txtProductName1.setText("");
        txtPrice1.setText("");
        txtii1.setText("");
        txtFinal1.setText("");
        txtDate.setText("");
    }

    private void loadTable1() {
        try {
            String sql = "SELECT * FROM tblorder ";
            ps = connection.prepareStatement(sql);

            // Assuming custIDValue is the value you want to use for the parameter

            ResultSet rs = ps.executeQuery();

            DefaultTableModel model = new DefaultTableModel();
            tblOrder.setModel(model);
            
            model.addColumn("Order ID");
            model.addColumn("Customer ID");
            model.addColumn("Customer Name");
            model.addColumn("Product ID");
            model.addColumn("Product Name");
            model.addColumn("Unit Price");
            model.addColumn("Qty");
            model.addColumn("Price");
            model.addColumn("Date");

            while (rs.next()) {
                String orderID = rs.getString("OrderId");
                String custID = rs.getString("CustID");
                String custName = rs.getString("CustName");
                String ProID = rs.getString("ProID");
                String ProName = rs.getString("Product_Name");
                double UPrice = rs.getDouble("UPrice");
                int qty = rs.getInt("qty");
                double Price = rs.getDouble("Price");
                String date = rs.getString("OrderDate");

                model.addRow(new Object[]{orderID, custID, custName, ProID, ProName, UPrice, qty, Price, date});
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
